!function e(t,r,n){function o(i,s){if(!r[i]){if(!t[i]){var c="function"==typeof require&&require;if(!s&&c)return c(i,!0);if(a)return a(i,!0);var l=new Error("Cannot find module '"+i+"'");throw l.code="MODULE_NOT_FOUND",l}var u=r[i]={exports:{}};t[i][0].call(u.exports,function(e){var r=t[i][1][e];return o(r?r:e)},u,u.exports,e,t,r,n)}return r[i].exports}for(var a="function"==typeof require&&require,i=0;i<n.length;i++)o(n[i]);return o}({1:[function(e,t,r){"use strict";"serviceWorker"in navigator&&!function(){var e=function(){r&&(r=!1,navigator.serviceWorker.controller&&(Date.now()-t<5e3?(console.log("Reloading to activate updated worker."),location.reload()):console.log("Not reloading, loaded too long..")))},t=Date.now(),r=!0;navigator.serviceWorker.controller&&navigator.serviceWorker.controller.addEventListener("statechange",function(t){var r=t.target;console.log('sw.controller.onstatechange "%s"',r.state),"redundant"===r.state&&e()}),navigator.serviceWorker.register("offline-worker.js").then(function(e){return console.log("offline-worker.js registered"),new Promise(function(t){e.addEventListener("updatefound",t)})}).then(function(e){var t=e.target,r=t.installing;return console.log("registration.onupdatefound"),new Promise(function(e){r.addEventListener("statechange",e)})}).then(function(t){var r=t.target;console.log('registration.installing.onstatechange state "%s"',r.state),"installed"===r.state&&e()})}()},{}]},{},[1]);
//# sourceMappingURL=bundle.js.map

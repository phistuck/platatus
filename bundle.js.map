{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","bundle.js","src/js/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","navigator","didUpdate","shouldUpdate","serviceWorker","controller","Date","now","started","console","log","location","reload","addEventListener","_ref","target","state","register","then","registration","Promise","resolve","_ref2","installing","_ref3"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCCA,YCDI,kBAAmBK,aDIrB,WACE,GCFOC,GAAT,WACOC,IAGLA,GAAe,EAGVF,UAAUG,cAAcC,aAGzBC,KAAKC,MAAQC,EAAU,KACzBC,QAAQC,IAAI,yCACZC,SAASC,UAETH,QAAQC,IAAI,uCAhBVF,EAAUF,KAAKC,MACjBJ,GAAe,CAkBfF,WAAUG,cAAcC,YAC1BJ,UAAUG,cAAcC,WAAWQ,iBAAiB,cAAe,SAACC,GDOhE,GCPiEC,GAADD,EAACC,MACnEN,SAAQC,IAAI,mCAAoCK,EAAOC,OAClC,cAAjBD,EAAOC,OACTd,MAKND,UAAUG,cAAca,SAAS,qBAC9BC,KAAK,SAACC,GAEL,MADAV,SAAQC,IAAI,gCACL,GAAIU,SAAQ,SAACC,GAClBF,EAAaN,iBAAiB,cAAeQ,OAGhDH,KAAK,SAACI,GDOL,GCPMP,GAADO,EAACP,OACCQ,EAAcR,EAAdQ,UAIP,OAHAd,SAAQC,IAAI,8BAGL,GAAIU,SAAQ,SAACC,GAClBE,EAAWV,iBAAiB,cAAeQ,OAG9CH,KAAK,SAACM,GDQL,GCRMT,GAADS,EAACT,MACNN,SAAQC,IAAI,mDAAoDK,EAAOC,OAClD,cAAjBD,EAAOC,OAGXd,mBDcK","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nif ('serviceWorker' in navigator) {\n  (function () {\n    var didUpdate = function didUpdate() {\n      if (!shouldUpdate) {\n        return;\n      }\n      shouldUpdate = false;\n      // Only show the prompt if there is currently a controller\n      // so it is not shown on first load.\n      if (!navigator.serviceWorker.controller) {\n        return;\n      }\n      if (Date.now() - started < 5000) {\n        console.log('Reloading to activate updated worker.');\n        location.reload();\n      } else {\n        console.log('Not reloading, loaded too long..');\n      }\n    };\n\n    var started = Date.now();\n    var shouldUpdate = true;\n\n    if (navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.addEventListener('statechange', function (_ref) {\n        var target = _ref.target;\n\n        console.log('sw.controller.onstatechange \"%s\"', target.state);\n        if (target.state === 'redundant') {\n          didUpdate();\n        }\n      });\n    }\n\n    navigator.serviceWorker.register('offline-worker.js').then(function (registration) {\n      console.log('offline-worker.js registered');\n      return new Promise(function (resolve) {\n        registration.addEventListener('updatefound', resolve);\n      });\n    }).then(function (_ref2) {\n      var target = _ref2.target;\n      var installing = target.installing;\n\n      console.log('registration.onupdatefound');\n      // Wait for the new service worker to be installed before\n      // prompting to update.\n      return new Promise(function (resolve) {\n        installing.addEventListener('statechange', resolve);\n      });\n    }).then(function (_ref3) {\n      var target = _ref3.target;\n\n      console.log('registration.installing.onstatechange state \"%s\"', target.state);\n      if (target.state !== 'installed') {\n        return;\n      }\n      didUpdate();\n    });\n  })();\n}\n\n},{}]},{},[1])\n\n","if ('serviceWorker' in navigator) {\n  const started = Date.now();\n  let shouldUpdate = true;\n  function didUpdate() {\n    if (!shouldUpdate) {\n      return;\n    }\n    shouldUpdate = false;\n    // Only show the prompt if there is currently a controller\n    // so it is not shown on first load.\n    if (!navigator.serviceWorker.controller) {\n      return;\n    }\n    if (Date.now() - started < 5000) {\n      console.log('Reloading to activate updated worker.');\n      location.reload();\n    } else {\n      console.log('Not reloading, loaded too long..');\n    }\n  }\n  if (navigator.serviceWorker.controller) {\n    navigator.serviceWorker.controller.addEventListener('statechange', ({target}) => {\n      console.log('sw.controller.onstatechange \"%s\"', target.state);\n      if (target.state === 'redundant') {\n        didUpdate();\n      }\n    });\n  }\n\n  navigator.serviceWorker.register('offline-worker.js')\n    .then((registration) => {\n      console.log('offline-worker.js registered');\n      return new Promise((resolve) => {\n        registration.addEventListener('updatefound', resolve);\n      });\n    })\n    .then(({target}) => {\n      const {installing} = target;\n      console.log('registration.onupdatefound');\n      // Wait for the new service worker to be installed before\n      // prompting to update.\n      return new Promise((resolve) => {\n        installing.addEventListener('statechange', resolve);\n      });\n    })\n    .then(({target}) => {\n      console.log('registration.installing.onstatechange state \"%s\"', target.state);\n      if (target.state !== 'installed') {\n        return;\n      }\n      didUpdate();\n    });\n}\n"],"sourceRoot":"/source/"}